version: '3.8'

services:
  # Yellowstone API Service
  yellowstone-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: yellowstone-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID:-local}
      - AZURE_RESOURCE_GROUP=Yellowstone
      - AZURE_WORKSPACE_NAME=yellowstone-dev
      - SENTINEL_WORKSPACE_ID=${SENTINEL_WORKSPACE_ID:-}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-}
    volumes:
      - ../src:/app/src
      - yellowstone-logs:/app/logs
    networks:
      - yellowstone-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # PostgreSQL Database for metadata and audit logs
  postgres:
    image: postgres:16-alpine
    container_name: yellowstone-postgres
    environment:
      POSTGRES_USER: yellowstone
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-yellowstone-dev}
      POSTGRES_DB: yellowstone
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    networks:
      - yellowstone-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yellowstone"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: yellowstone-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-yellowstone-dev}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - yellowstone-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: yellowstone-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - yellowstone-network
    depends_on:
      - yellowstone-api

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: yellowstone-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - yellowstone-network
    depends_on:
      - prometheus

volumes:
  yellowstone-logs:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-storage:

networks:
  yellowstone-network:
    driver: bridge
